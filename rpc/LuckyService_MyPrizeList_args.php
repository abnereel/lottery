<?php
namespace rpc;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class LuckyService_MyPrizeList_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'uid',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ip',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'now',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'app',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'sign',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var string
     */
    public $username = null;
    /**
     * @var string
     */
    public $ip = null;
    /**
     * @var int
     */
    public $now = null;
    /**
     * @var string
     */
    public $app = null;
    /**
     * @var string
     */
    public $sign = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['ip'])) {
                $this->ip = $vals['ip'];
            }
            if (isset($vals['now'])) {
                $this->now = $vals['now'];
            }
            if (isset($vals['app'])) {
                $this->app = $vals['app'];
            }
            if (isset($vals['sign'])) {
                $this->sign = $vals['sign'];
            }
        }
    }

    public function getName()
    {
        return 'LuckyService_MyPrizeList_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ip);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->now);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->app);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sign);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('LuckyService_MyPrizeList_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ip !== null) {
            $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
            $xfer += $output->writeString($this->ip);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->now !== null) {
            $xfer += $output->writeFieldBegin('now', TType::I64, 4);
            $xfer += $output->writeI64($this->now);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->app !== null) {
            $xfer += $output->writeFieldBegin('app', TType::STRING, 5);
            $xfer += $output->writeString($this->app);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sign !== null) {
            $xfer += $output->writeFieldBegin('sign', TType::STRING, 6);
            $xfer += $output->writeString($this->sign);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
